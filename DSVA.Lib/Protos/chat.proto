syntax = "proto3";

option csharp_namespace = "DSVA.Service";

package chat;

service Chat{
    rpc SendMessage (ChatMessage) returns (Status);
    rpc StartElection (Election) returns (Status);
    rpc WonElection (Elected) returns (Status);
    rpc Connected (Connect) returns (Status);
    rpc SignOut (Disconnect) returns (Status);
}

// Common message header
message Header{
    repeated int64 clock = 1;
    string id = 2;
    int32 leader = 3;
}

// Common message response
message Status{
    bool ok = 1;
    string reason = 2;    
}

// Start election
message Election{
    Header header = 1;
     int32 node = 2;
}

// Won election
message Elected{
    Header header = 1;
     int32 node = 2;
}

// Send chat message to a ring
message ChatMessage{
    Header header = 1;
    int32 from = 2;
    int32 to = 3;
    string content = 4;
}

// Chat message received, record it to every node
message RecordMessage{
    Header header = 1;
    int32 from = 2;
    int32 to = 3;
    string content = 4;
}

// send chat message, only for WPF client
message ChatMessageClient{
    string from = 2;
    string to = 3;
    string content = 4;
}

// node gracefuly disconnected
message Disconnect {
    Header header = 1;
    int32 node = 2;
}

// node gracefully connected
message Connect {
    Header header = 1;
    int32 node = 2;
    string addr = 3;
    string _nextAddr = 4;
    int32 _nextId = 5;
    string _nextNextAddr = 6;
    int32 _nextNextId = 7;
}

// droped node detected
message Dropped {
    Header header = 1;
    int32 node = 2;
}